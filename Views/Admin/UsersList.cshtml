@model List<User>
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer Localizer
@{
    var cultureItems = new List<SelectListItem>
    {
        new SelectListItem { Value = "en-US", Text = "English" },
        new SelectListItem { Value = "ru-RU", Text = "Русский" }
    };
}
@{
    Layout = "_Layout";
    ViewData["Title"] = @Localizer["UsersInfo"];
}
<div class="btn-toolbar mb-3" role="toolbar">
    <div class="btn-group mr-2" role="group">
        <button type="button" class="btn btn-primary" onclick="blockSelected()">@Localizer["Block"]</button>
        <button type="button" class="btn btn-success" onclick="unblockSelected()">@Localizer["Unblock"]</button>
        <button type="button" class="btn btn-danger" onclick="deleteSelected()">@Localizer["Delete"]</button>
    </div>
</div>
<form id="sortingForm">
    <select id="sortingOption">
        <option value="UserNameAsc">@Localizer["UserNameAsc"]</option>
        <option value="UserNameDesc">@Localizer["UserNameDesc"]</option>
        <option value="EmailAsc">@Localizer["EmailAsc"]</option>
        <option value="EmailDesc">@Localizer["EmailDesc"]</option>
        <option value="RegistrationDateAsc">@Localizer["RegistrationDateAsc"]</option>
        <option value="RegistrationDateDesc">@Localizer["RegistrationDateDesc"]</option>
    </select>
</form>
<table class="table" id="UsersTable">
    <thead>
        <tr>
            <th><input type="checkbox" id="selectAll" onclick="toggleAllCheckboxes()" /></th>
            <th>@Localizer["Name"]</th>
            <th>@Localizer["Email"]</th>
            <th>@Localizer["RegistrationDate"]</th>
            <th>@Localizer["IsBlocked"]</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td><input type="checkbox" name="selectedItem" value="@item.Id" /></td>
                <td>@item.Name</td>
                <td>@item.Email</td>
                <td>@item.RegistrationDate</td>
                <td>@item.IsBlocked</td>
                <td>
                    <form asp-action="UserReviews" asp-controller="Admin" method="get">
                        <input type="hidden" name="userId" value="@item.Id" />
                        <button type="submit" class="btn btn-success">@Localizer["UserPage"]</button>
                    </form>
                </td>
            </tr>
        }

    </tbody>
</table>
<a href="@Url.Action("Index", "Home")" class="btn btn-primary">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z" />
    </svg> @Localizer["BackToIndexPage"]
</a>
<script>
    function toggleAllCheckboxes() {
        var selectAll = document.getElementById('selectAll');
        var checkboxes = document.getElementsByName('selectedItem');
        for (var i = 0; i < checkboxes.length; i++) {
            checkboxes[i].checked = selectAll.checked;
        }
    }

    function getSelectedItems() {
        return Array.from(document.getElementsByName('selectedItem'))
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);
    }

    function performAction(url) {
        var selectedIds = getSelectedItems();
        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ selectedUserIds: selectedIds })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (data.redirectUrl) {
                        window.location.href = data.redirectUrl;
                    } else {
                        location.reload();
                    }
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                alert('An error occurred.');
            });
    }

    function blockSelected() {
        performAction('@Url.Action("Block", "Admin")');
    }

    function unblockSelected() {
        performAction('@Url.Action("Unblock", "Admin")');
    }

    function deleteSelected() {
        performAction('@Url.Action("Delete", "Admin")');
    }

    document.getElementById('sortingOption').addEventListener('change', function () {
        const selectedValue = this.value;

        fetch(`/Admin/UsersList?sorting=${selectedValue}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => response.text()) 
            .then(html => {
                const newTable = document.createElement('div');
                newTable.innerHTML = html;
                const oldTable = document.getElementById('UsersTable');
                if (oldTable) {
                    const newTableElement = newTable.querySelector('#UsersTable');
                    if (newTableElement) {
                        oldTable.parentNode.replaceChild(newTableElement, oldTable);
                    } else {
                        console.error('New table element not found.');
                    }
                } else {
                    console.error('Old table element not found.');
                }
            })

            .catch(error => {
                console.error('Error occured while sorting items:', error);
            });
    });
</script>